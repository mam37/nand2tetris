// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Mux to A
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMuxA);
    And(a=instruction[15], b=instruction[5], out=assignA);
    Not(in=instruction[15], out=notInstruction15);
    Or(a=assignA, b=notInstruction15, out=loadA);

    // A Register
    ARegister(in=outMuxA, load=loadA,out=outA, 
        out[0] = addressM[0],
        out[1] = addressM[1],
        out[2] = addressM[2],
        out[3] = addressM[3],
        out[4] = addressM[4],
        out[5] = addressM[5],
        out[6] = addressM[6],
        out[7] = addressM[7],
        out[8] = addressM[8],
        out[9] = addressM[9],
        out[10] = addressM[10],
        out[11] = addressM[11],
        out[12] = addressM[12],
        out[13] = addressM[13],
        out[14] = addressM[14]
    ); 
   
    // D Register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    // A/M Mux to ALU
    And(a=instruction[15], b=instruction[12], out=selAMMux);
    Mux16(a=outA, b=inM, sel=selAMMux, out=outMuxAM);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // addressM
    ALU(
        x = outD, 
        y = outMuxAM,
        zx = instruction[11],
        nx = instruction[10],
        zy = instruction[9],
        ny = instruction[8],
        f  = instruction[7],
        no = instruction[6],
        zr = zr,
        ng = ng,
        out = outALU,
        out=outM
    );

    // jump instructions
    DMux8Way(
        in = instruction[15],
        sel[0] = instruction[0],
        sel[1] = instruction[1],
        sel[2] = instruction[2],
        a = nojmp,
        b = JGT,
        c = JEQ,
        d = JGE,
        e = JLT,
        f = JNE,
        g = JLE,
        h = JMP
    );
    
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);

    // JGT
    And(a=notzr, b=notng, out=pos);
    And(a=pos, b=JGT, out=doJGT);

    // JEQ
    And(a=zr, b=JEQ, out=doJEQ);


    // JGE
    Or(a=zr, b=notng, out=isJGE);
    And(a=isJGE, b=JGE, out=doJGE); 

    // JLT
    And(a=ng, b=notzr, out=isJLT);
    And(a=isJLT, b=JLT, out=doJLT);

    // JNE
    And(a=notzr, b=JNE, out=doJNE);
    
    // JLE
    Or(a=zr, b=ng, out=isLE);
    And(a=isLE, b=JLE, out=doJLE);

    Xor(a=nojmp, b=nojmp, out=eqFalse);

    Or8Way(
        in[0] = eqFalse,
        in[1] = doJGT,
        in[2] = doJEQ,
        in[3] = doJGE,
        in[4] = doJLT,
        in[5] = doJNE,
        in[6] = doJLE,
        in[7] = JMP,
        out=doLoad
    );
    
    // PC
    PC (
        in = outA,
        inc = true,
        load = doLoad,
        reset = reset,
        out[0] = pc[0],
        out[1] = pc[1],
        out[2] = pc[2],
        out[3] = pc[3],
        out[4] = pc[4],
        out[5] = pc[5],
        out[6] = pc[6],
        out[7] = pc[7],
        out[8] = pc[8],
        out[9] = pc[9],
        out[10] = pc[10],
        out[11] = pc[11],
        out[12] = pc[12],
        out[13] = pc[13],
        out[14] = pc[14]
    );

}

