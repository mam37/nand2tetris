// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // x ops: zx (zero x), nx (!x)
        Mux16(a=x, b=false, sel=zx, out=zxout);
        Not16(in=zxout, out=notzxout);
        Mux16(a=zxout, b=notzxout, sel=nx, out=nxout);
        
        // y ops: zy (zero y), ny (!y)
        Mux16(a=y, b=false, sel=zy, out=zyout);
        Not16(in=zyout, out=notzyout);
        Mux16(a=zyout, b=notzyout, sel=ny, out=nyout);
        
        // f stage (if f==1, then x+y, else x&y)
        Add16(a=nxout, b=nyout, out=sumxy);
        And16(a=nxout, b=nyout, out=andxy);
        Mux16(a=andxy, b=sumxy, sel=f, out=fout);

        // no stage (negate f stage output)
        Not16(in=fout, out=notfout);
        Mux16(a=fout, b=notfout, sel=no, out[15]=ng, out=out,
            out[0]=zrin0,
            out[1]=zrin1,
            out[2]=zrin2,
            out[3]=zrin3,
            out[4]=zrin4,
            out[5]=zrin5,
            out[6]=zrin6,
            out[7]=zrin7,
            out[8]=zrin8,
            out[9]=zrin9,
            out[10]=zrin10,
            out[11]=zrin11,
            out[12]=zrin12,
            out[13]=zrin13,
            out[14]=zrin14,
            out[15]=zrin15);
       
        //zr flag (if out == 0)
        Or8Way(    
            in[0]=zrin0,
            in[1]=zrin1,
            in[2]=zrin2,
            in[3]=zrin3,
            in[4]=zrin4,
            in[5]=zrin5,
            in[6]=zrin6,
            in[7]=zrin7,
            out=zr07);
        Or8Way(    
            in[0]=zrin8,
            in[1]=zrin9,
            in[2]=zrin10,
            in[3]=zrin11,
            in[4]=zrin12,
            in[5]=zrin13,
            in[6]=zrin14,
            in[7]=zrin15,
            out=zr815); 
        
        Or(a=zr07, b=zr815, out=prezr);
        Not(in=prezr, out=zr);

}
